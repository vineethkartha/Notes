* Section 2:SOLID Design principles
  The SOLID principles are a set of guidelines used in OOP to determine how classes are designed and used.
  SOLID stands for:
   1. *Single Responsibility Principle*
      *A class should have one, and only one, reason to change.* This principle is pretty self defining. 
   2. *Open Close Principle*
      This principle states that a class should be closed for
      modification but open for extension. Use inheritance to extend classes.
   3. *Liskov Substitution Principle*
      Subtypes should be immediately substitutable for the base types
   4. *Interface Segragation Principle*
      With this principle we segragate the interface from
      implementation. This ensures that provide a clean interface
      without an empty fucntions. The idea is to split the interfaces
      into groups that make sense rather than have a single interface
      with everything in it.
   5. *Dependency Inversion*
      1) High level modules should not depend on low level modules and
	 instead they should both depend on abstractions
      2) Abstractions should not depend on details but it should be the
	 other way
* Section 3 : Builder Pattern
