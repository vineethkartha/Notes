*  General Notes
**  Uniform initialization 
   Use {} to initialize any variable also known as value initialization
   Avoid copy initialization which uses =
   1. Value initialization T obj{}
   2. Direct initialization T obj{v}
   3. Copy initialization T obj = v
** References
   No memory allocated for reference since it is just a name
   Initializer should be an L value.
   Reference will always be bound to its referant.
** Const and pointers
   1. const int *ptr ensures that whatever is pointed to by ptr cannot be changed. Irrespective of whether that data is const or not
   2. prefer const reference over const pointer.
** Type Inference
   The auto keyword is used in C++ to infer types.
   The auto keyword discards qualifiers. e.g. 
   #+begin_src c++
   cont int i = 5;
   auto j = i; // here j is not const int
   auto &ref = i; // here the ref is const reference
   #+end_src
** Function pointer
   A function pointer is declared with return_type (*ptr)(args....)
** Memory management
   stack for local variables
   data section for global and static
   heap for allocated at runtime
** memory allocation for array
   int *p = new int[5]
   delete []p;
** Two Dimensional array
   Two dimensional arrays are just array of arrays so while freeing the memory take care of deleting the rows independently.
** default keyword
   In C++11 we can ask the compiler to create the default copy ctr, ctr, destructor 
** LValue and RValue
   Function that returns by value return r value whereas functions that return by reference give lvalues
   Lvalue ref may bind to rvalue if it is const lvalue ref
   Rvalue references were introduced to detect temporary objects
** Rule of 5
   If user implements any one of the following then it is better to implement the others as well
   1. Destructor
   2. Copy Constructor
   3. Copy assignment operator
   4. Move Constructor
   5. Move assignment operator
** Copy Elision
   Compiler can decide to elide certain copy constructor calls. Compiler can avoid creating copy of temp objects
   Suppose the code needs to create a temporary copy which then needs to be passed to a contructor to create a new object the compiler can optimise out the temp object creation and directly call the constructor for the object.
** Rules of Operator Overloading
   1. Associativity, precedence are maintained
   2. Operator functions should be non-static except for new and delete
   3. atleast one operand must be user defined
   4. If first operand is primitive then Global overload
      
