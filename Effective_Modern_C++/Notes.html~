<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-07-18 Thu 11:13 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Effective Modern C++ Notes</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Vineeth Kartha" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2018 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">Effective Modern C++ Notes</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org4c19071">1. Chapter 1 - Deducing Types</a>
<ul>
<li><a href="#org7c42b3c">1.1. Item 1 - Understand template type deduction</a>
<ul>
<li><a href="#orgedad9ac">1.1.1. The Rules</a></li>
<li><a href="#orgabbdf98">1.1.2. A side note</a></li>
</ul>
</li>
<li><a href="#orgbdc4699">1.2. Item 2 - Understand auto type deduction</a>
<ul>
<li><a href="#org4a8c161">1.2.1. The type deduction with auto is as same as template type deduction</a></li>
<li><a href="#org1eb99a7">1.2.2. The exception is with auto x = {23}.</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org094118d">2. Chapter 4 - Smart Pointers</a>
<ul>
<li><a href="#org019d78b">2.1. Item 18 - Unique pointers</a></li>
<li><a href="#org177eca8">2.2. Item 19 - Shared pointers</a>
<ul>
<li><a href="#org3c6e362">2.2.1. std::shared<sub>ptr</sub> retains a count of how many pointers are referring to the same resource.</a></li>
<li><a href="#org0ec8fc7">2.2.2. Their size will be twice the size of raw pointers as they maintain reference count.</a></li>
<li><a href="#org3a227b0">2.2.3. The ref count is dynamically allocated unless the shared<sub>ptr</sub> is constructed by make<sub>shared</sub></a></li>
<li><a href="#orgdc7eb2e">2.2.4. shared<sub>ptr</sub> can have custom deleter but these need not be part of the type</a></li>
<li><a href="#org8771c4c">2.2.5. custom deleter does not change the size of the shared<sub>ptr</sub></a></li>
<li><a href="#org0ce9edb">2.2.6. The extra information of shared<sub>ptr</sub> is kept in a control block</a></li>
<li><a href="#orgbde18ae">2.2.7. A control block is created when:</a></li>
<li><a href="#org72e245f">2.2.8. Points to remember:</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div id="outline-container-org4c19071" class="outline-2">
<h2 id="org4c19071"><span class="section-number-2">1</span> Chapter 1 - Deducing Types</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org7c42b3c" class="outline-3">
<h3 id="org7c42b3c"><span class="section-number-3">1.1</span> Item 1 - Understand template type deduction</h3>
<div class="outline-text-3" id="text-1-1">
</div>
<div id="outline-container-orgedad9ac" class="outline-4">
<h4 id="orgedad9ac"><span class="section-number-4">1.1.1</span> The Rules</h4>
<div class="outline-text-4" id="text-1-1-1">
<div class="org-src-container">
<pre class="src src-C++"><span style="color: #4f97d7; font-weight: bold;">template</span>&lt;<span style="color: #4f97d7; font-weight: bold;">typename</span> <span style="color: #ce537a; font-weight: bold;">T</span>&gt;
<span style="color: #ce537a; font-weight: bold;">void</span> <span style="color: #bc6ec5; font-weight: bold;">f</span>(<span style="color: #ce537a; font-weight: bold;">ParamType</span> <span style="color: #7590db;">param</span>);
</pre>
</div>
<p>
Consider the above template function, which is exercised as below
</p>
<div class="org-src-container">
<pre class="src src-C++">f(expr);
</pre>
</div>
<p>
Then the following rules of template deduction are used:
</p>
<ol class="org-ol">
<li>When void f(T&amp; param)
In this scenario if expr is a reference ignore the reference part</li>
<li>When void f(T&amp;&amp; Param)
In this scenario if expr is lvalue then ParamType is lvalue Reference</li>
<li>When void f(T param)
In this case from expr constness, reference and volatile is ignored</li>
</ol>
</div>
</div>
<div id="outline-container-orgabbdf98" class="outline-4">
<h4 id="orgabbdf98"><span class="section-number-4">1.1.2</span> A side note</h4>
<div class="outline-text-4" id="text-1-1-2">
<p>
For array arguments if the ParamType is pass by value the passing name of array is deduced as pointer. However if the ParamType is a reference then the deduced type is a reference to an array of given size.
</p>
</div>
</div>
</div>
<div id="outline-container-orgbdc4699" class="outline-3">
<h3 id="orgbdc4699"><span class="section-number-3">1.2</span> Item 2 - Understand auto type deduction</h3>
<div class="outline-text-3" id="text-1-2">
</div>
<div id="outline-container-org4a8c161" class="outline-4">
<h4 id="org4a8c161"><span class="section-number-4">1.2.1</span> The type deduction with auto is as same as template type deduction</h4>
</div>
<div id="outline-container-org1eb99a7" class="outline-4">
<h4 id="org1eb99a7"><span class="section-number-4">1.2.2</span> The exception is with auto x = {23}.</h4>
<div class="outline-text-4" id="text-1-2-2">
<p>
This results in a type dedcution of <code>std::initializer_list</code>, whereas the template type deduction does not consider this as <code>initializer_list</code>
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-org094118d" class="outline-2">
<h2 id="org094118d"><span class="section-number-2">2</span> Chapter 4 - Smart Pointers</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-org019d78b" class="outline-3">
<h3 id="org019d78b"><span class="section-number-3">2.1</span> Item 18 - Unique pointers</h3>
</div>
<div id="outline-container-org177eca8" class="outline-3">
<h3 id="org177eca8"><span class="section-number-3">2.2</span> Item 19 - Shared pointers</h3>
<div class="outline-text-3" id="text-2-2">
</div>
<div id="outline-container-org3c6e362" class="outline-4">
<h4 id="org3c6e362"><span class="section-number-4">2.2.1</span> std::shared<sub>ptr</sub> retains a count of how many pointers are referring to the same resource.</h4>
</div>
<div id="outline-container-org0ec8fc7" class="outline-4">
<h4 id="org0ec8fc7"><span class="section-number-4">2.2.2</span> Their size will be twice the size of raw pointers as they maintain reference count.</h4>
</div>
<div id="outline-container-org3a227b0" class="outline-4">
<h4 id="org3a227b0"><span class="section-number-4">2.2.3</span> The ref count is dynamically allocated unless the shared<sub>ptr</sub> is constructed by make<sub>shared</sub></h4>
</div>
<div id="outline-container-orgdc7eb2e" class="outline-4">
<h4 id="orgdc7eb2e"><span class="section-number-4">2.2.4</span> shared<sub>ptr</sub> can have custom deleter but these need not be part of the type</h4>
<div class="outline-text-4" id="text-2-2-4">
<div class="org-src-container">
<pre class="src src-C++"><span style="color: #a45bad;">std</span>::<span style="color: #ce537a; font-weight: bold;">shared_ptr</span>&lt;MyClass&gt; <span style="color: #7590db;">ptr</span>(<span style="color: #4f97d7; font-weight: bold;">new</span> <span style="color: #ce537a; font-weight: bold;">MyClass</span>, customdelFcn);
</pre>
</div>
</div>
</div>
<div id="outline-container-org8771c4c" class="outline-4">
<h4 id="org8771c4c"><span class="section-number-4">2.2.5</span> custom deleter does not change the size of the shared<sub>ptr</sub></h4>
</div>
<div id="outline-container-org0ce9edb" class="outline-4">
<h4 id="org0ce9edb"><span class="section-number-4">2.2.6</span> The extra information of shared<sub>ptr</sub> is kept in a control block</h4>
</div>
<div id="outline-container-orgbde18ae" class="outline-4">
<h4 id="orgbde18ae"><span class="section-number-4">2.2.7</span> A control block is created when:</h4>
<div class="outline-text-4" id="text-2-2-7">
<ol class="org-ol">
<li>A <code>shared_ptr</code> is created with <code>make_shared</code></li>
<li>A <code>shared_ptr</code> is created from <code>unique_ptr</code></li>
<li>A <code>shared_ptr</code> is created from a raw</li>
</ol>
</div>
<ol class="org-ol">
<li><a id="orgf24a9f2"></a>Hence it is recommended to avoid code as shown below:<br />
<div class="outline-text-5" id="text-2-2-7-1">
<div class="org-src-container">
<pre class="src src-C++"><span style="color: #4f97d7; font-weight: bold;">auto</span> <span style="color: #7590db;">p</span> = <span style="color: #4f97d7; font-weight: bold;">new</span> <span style="color: #ce537a; font-weight: bold;">MyClass</span>; <span style="color: #2aa1ae; background-color: #292e34; font-style: italic;">// </span><span style="color: #2aa1ae; background-color: #292e34; font-style: italic;">creates a raw pointer p</span>
<span style="color: #a45bad;">std</span>::<span style="color: #ce537a; font-weight: bold;">shared</span>&lt;MyClass&gt; <span style="color: #bc6ec5; font-weight: bold;">sw1</span>(p,customDel);
<span style="color: #a45bad;">std</span>::<span style="color: #ce537a; font-weight: bold;">shared</span>&lt;MyClass&gt; <span style="color: #bc6ec5; font-weight: bold;">sw2</span>(p,customDel);
</pre>
</div>
<p>
This will create two control blocks for the resource in p. Instead write the code as shown below
</p>
<div class="org-src-container">
<pre class="src src-C++"><span style="color: #a45bad;">std</span>::<span style="color: #ce537a; font-weight: bold;">shared</span>&lt;MyClass&gt; <span style="color: #7590db;">sw1</span>(<span style="color: #4f97d7; font-weight: bold;">new</span> <span style="color: #ce537a; font-weight: bold;">MyClass</span>,customDel);
<span style="color: #a45bad;">std</span>::<span style="color: #ce537a; font-weight: bold;">shared</span>&lt;MyClass&gt; <span style="color: #bc6ec5; font-weight: bold;">sw2</span>(sw1);
</pre>
</div>
</div>
</li>
<li><a id="org87f739e"></a>Another scenario that can cause a problem with multiple control blocks is as shown here:<br />
<div class="outline-text-5" id="text-2-2-7-2">
<div class="org-src-container">
<pre class="src src-C++"><span style="color: #bc6ec5;">#include</span><span style="color: #2d9574;">&lt;iostream&gt;</span>
<span style="color: #bc6ec5;">#include</span><span style="color: #2d9574;">&lt;memory&gt;</span>
<span style="color: #bc6ec5;">#include</span><span style="color: #2d9574;">&lt;vector&gt;</span>
<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">A</span>;
<span style="color: #a45bad;">std</span>::<span style="color: #ce537a; font-weight: bold;">vector</span>&lt;<span style="color: #a45bad;">std</span>::<span style="color: #ce537a; font-weight: bold;">shared_ptr</span>&lt;<span style="color: #ce537a; font-weight: bold;">A</span>&gt;&gt; <span style="color: #7590db;">AVector</span>;

<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">A</span> {
  <span style="color: #4f97d7; font-weight: bold;">public</span>:
    <span style="color: #bc6ec5; font-weight: bold;">A</span>() {
      <span style="color: #a45bad;">std</span>::cout&lt;&lt;<span style="color: #2d9574;">"cstr\n"</span>;
    }
    ~<span style="color: #bc6ec5; font-weight: bold;">A</span>() {
      <span style="color: #a45bad;">std</span>::cout&lt;&lt;<span style="color: #2d9574;">"dstr\n"</span>;
    }
    <span style="color: #ce537a; font-weight: bold;">void</span> <span style="color: #bc6ec5; font-weight: bold;">AddToAVector</span>() {
      AVector.emplace_back(<span style="color: #4f97d7; font-weight: bold;">this</span>);
    }
};

<span style="color: #ce537a; font-weight: bold;">int</span> <span style="color: #bc6ec5; font-weight: bold;">main</span>() {
   <span style="color: #4f97d7; font-weight: bold;">auto</span> <span style="color: #7590db;">a_ptr</span> = <span style="color: #a45bad;">std</span>::make_shared&lt;<span style="color: #ce537a; font-weight: bold;">A</span>&gt;();
  <span style="color: #2aa1ae; background-color: #292e34; font-style: italic;">//</span><span style="color: #2aa1ae; background-color: #292e34; font-style: italic;">a_ptr-&gt;AddToAVector(); // freeing of this pointer casuses a crash</span>
}
</pre>
</div>
</div>
</li>
<li><a id="org0ff5093"></a>We can get this code to work with the code below<br />
<div class="outline-text-5" id="text-2-2-7-3">
<div class="org-src-container">
<pre class="src src-C++"><span style="color: #bc6ec5;">#include</span><span style="color: #2d9574;">&lt;iostream&gt;</span>
<span style="color: #bc6ec5;">#include</span><span style="color: #2d9574;">&lt;memory&gt;</span>
<span style="color: #bc6ec5;">#include</span><span style="color: #2d9574;">&lt;vector&gt;</span>
<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">A</span>;
<span style="color: #a45bad;">std</span>::<span style="color: #ce537a; font-weight: bold;">vector</span>&lt;<span style="color: #a45bad;">std</span>::<span style="color: #ce537a; font-weight: bold;">shared_ptr</span>&lt;<span style="color: #ce537a; font-weight: bold;">A</span>&gt;&gt; <span style="color: #7590db;">AVector</span>;

<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">A</span>: <span style="color: #4f97d7; font-weight: bold;">public</span> <span style="color: #a45bad;">std</span>::<span style="color: #ce537a; font-weight: bold;">enable_shared_from_this</span>&lt;<span style="color: #ce537a; font-weight: bold;">A</span>&gt;{
  <span style="color: #4f97d7; font-weight: bold;">public</span>:
    <span style="color: #bc6ec5; font-weight: bold;">A</span>() {
      <span style="color: #a45bad;">std</span>::cout&lt;&lt;<span style="color: #2d9574;">"cstr\n"</span>;
    }
    ~<span style="color: #bc6ec5; font-weight: bold;">A</span>() {
      <span style="color: #a45bad;">std</span>::cout&lt;&lt;<span style="color: #2d9574;">"dstr\n"</span>;
    }
    <span style="color: #ce537a; font-weight: bold;">void</span> <span style="color: #bc6ec5; font-weight: bold;">AddToAVector</span>() {
      AVector.emplace_back(shared_from_this());
    }
};

<span style="color: #ce537a; font-weight: bold;">int</span> <span style="color: #bc6ec5; font-weight: bold;">main</span>() {
   <span style="color: #4f97d7; font-weight: bold;">auto</span> <span style="color: #7590db;">a_ptr</span> = <span style="color: #a45bad;">std</span>::make_shared&lt;<span style="color: #ce537a; font-weight: bold;">A</span>&gt;();
   <span style="color: #2aa1ae; background-color: #292e34; font-style: italic;">//</span><span style="color: #2aa1ae; background-color: #292e34; font-style: italic;">auto a_ptr = new A; if the above line is replaced with this line then an exception is thrown</span>
   <span style="color: #2aa1ae; background-color: #292e34; font-style: italic;">/*</span>
<span style="color: #2aa1ae; background-color: #292e34; font-style: italic;">   terminate called after throwing an instance of 'std::bad_weak_ptr'</span>
<span style="color: #2aa1ae; background-color: #292e34; font-style: italic;">   what():  bad_weak_ptr</span>
<span style="color: #2aa1ae; background-color: #292e34; font-style: italic;">   Abort</span>
<span style="color: #2aa1ae; background-color: #292e34; font-style: italic;">   */</span>
   a_ptr-&gt;AddToAVector(); 
}
</pre>
</div>
<p>
but for this code to work there must be an existing control block, because <code>shared_from_this</code> looks for the existing control block and creates a new <code>std::shared_ptr</code>. So for classes that derive from <code>std::enable_shared_from_this</code>, the constructors must be made private and have a factory kind of function that creates and returns a <code>std::shared_ptr</code>
</p>
</div>
</li>
</ol>
</div>
<div id="outline-container-org72e245f" class="outline-4">
<h4 id="org72e245f"><span class="section-number-4">2.2.8</span> Points to remember:</h4>
<div class="outline-text-4" id="text-2-2-8">
</div>
<ol class="org-ol">
<li><a id="orgba2e96a"></a>If in doubt whether to create a <code>shared_ptr</code> always create a <code>unique_ptr</code> because a <code>unique_ptr</code> can always be converted to <code>shared_ptr</code><br /></li>
<li><a id="org79270cb"></a><code>shared_ptr</code> does not support arrays, and you should not be using arrays when other STL containers are available.<br /></li>
</ol>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: Vineeth Kartha</p>
<p class="date">Created: 2019-07-18 Thu 11:13</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
